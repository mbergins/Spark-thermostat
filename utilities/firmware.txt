// This #include statement was automatically added by the Spark IDE."
#include <math.h>
#include <string.h>

////////////////////////////////////////////////////////////////////////////////
// Variable Definitions
////////////////////////////////////////////////////////////////////////////////

// resistance at 25 degrees C
#define THERMISTORNOMINAL 10000      
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25   
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000

const int numReadings = 500;
double tempTolerance = 0.5;

int relayOn = 0;

//Define all the pins used to connect relays/temp readings
const int coldPin = D0;
const int hotPin = D2;

const int beerTempPin = A0;
const int outTempPin = A7;

//The modeSta variable can either be 1 or 2, mode 1 is constant temp, while 
//mode 2 is ramp mode
int modeSta = 1;

//Temp mode state, should either be "Hot", "Cold" or "Neither"
String tempMode = "Neither";

//Ramp variables
double rampSta = millis();
//This ramp setting is 10 minutes
//double rampDays = 0.00694444444;
double rampDays = 0.25;

double millisInDay = 86400000;

double rampStart = 65;
double rampEnd = 55;

double tarTemp = 68;
unsigned long lastOffT = 0;
unsigned long curT = 0;
//Twenty minutes (in milliseconds)
unsigned int minOffTime = 20*60*1000; 

double temp = 0.0;
double tempOut = 0.0;
//Variable to track the temp when one of the relay was activated
double tempAtStart = 0.0;

char tempInfo[622];

double fracThroughRamp = 0;

bool outsideTar;

bool controlOn = 1;


////////////////////////////////////////////////////////////////////////////////
// Main Program
////////////////////////////////////////////////////////////////////////////////

void setup() {
  pinMode(hotPin, OUTPUT);
  pinMode(coldPin, OUTPUT);
  
  Particle.variable("tempInfo", tempInfo);
  Particle.variable("tempAtStart", tempAtStart);
  Particle.variable("outsideTar", outsideTar);
  
  
  Particle.function("setConstMode", setConstMode);
  Particle.function("setRampMode", setRampMode);
  Particle.function("turnOff", turnOff);

  //Take control of LED
  //RGB.control(true);
}

void loop() {
    temp = getTempReading(beerTempPin,0);
    tempOut = getTempReading(outTempPin,0);
    
    //Activating the relay seems to shift all the temps down by one
    if (relayOn == 1) {
        //tempOut = tempOut + 1.6;
        //temp = temp + 1.6;
    }
    
    if (modeSta == 2) {
        fracThroughRamp = ((millis() - rampSta)/(double)(rampDays*millisInDay));
        if (fracThroughRamp > 1) {
            fracThroughRamp = 1;
        }
        if (rampStart > rampEnd) {
            tarTemp = (double)rampStart - fracThroughRamp * ((double)rampStart - (double)rampEnd);
        } else {
            tarTemp = (fracThroughRamp * ((double)rampEnd - (double)rampStart)) + (double)rampStart;
        }
        
        //Round the resulting temp to one decimal place
        tarTemp = round(tarTemp*(double)10)/(double)10;
    }
    
    bool longEnough = (millis() - lastOffT) > minOffTime || (millis() < minOffTime && lastOffT == 0);
    
    if (controlOn & tempMode.equals("Hot")) {
        if (temp < tarTemp + tempTolerance/4) {
            digitalWrite(hotPin, HIGH);
            digitalWrite(coldPin, LOW);
            relayOn = 1;
        } else {
            tempMode = "Neither";
        }
        
    } else if (controlOn & tempMode.equals("Cold")) {
        if (temp > tarTemp - tempTolerance/4) {
            digitalWrite(coldPin, HIGH);
            digitalWrite(hotPin, LOW);
            relayOn = 1;
        } else {
            tempMode = "Neither";
        }
    } else if (controlOn & tempMode.equals("Neither")) {
        digitalWrite(coldPin, LOW);
        digitalWrite(hotPin, LOW);

        if (relayOn == 1) {
            lastOffT = millis();    
        }
        relayOn = 0;
        
        if (controlOn && longEnough) {
            if (temp < tarTemp - tempTolerance/2) {
                tempMode = "Hot";
                relayOn = 1;
            }
            if (temp > tarTemp + tempTolerance/2) {
                tempMode = "Cold";
                relayOn = 1;
            }
        }
    } else {
        //Not sure how we would get here, but just in case
        digitalWrite(coldPin, LOW);
        digitalWrite(hotPin, LOW);

        relayOn = 0;
        tempMode = "Neither";
    }
    
    //double tempDiff = tarTemp - temp;
    //outsideTar = abs(tempDiff) > (tempTolerance/2);
    
    //Logic for temp controls
    //if (outsideTar && longEnough && controlOn) {
    //    if (relayOn == 0) {
    //        tempAtStart = temp;
    //    }

    //    if (temp < tarTemp) {
    //        digitalWrite(hotPin, HIGH);
    //        digitalWrite(coldPin, LOW);
    //        tempMode = "Hot";
    //        relayOn = 1;
    //    } else if (temp > tarTemp) {
    //        digitalWrite(coldPin, HIGH);
    //        digitalWrite(hotPin, LOW);
    //        tempMode = "Cold";
    //        relayOn = 1;
    //    }
    //} else {
    //    tempMode = "Neither";
    //    digitalWrite(coldPin, LOW);
    //    digitalWrite(hotPin, LOW);

    //    if (relayOn == 1) {
    //        lastOffT = millis();    
    //    }
    //    relayOn = 0;
    //}
    
    //Control the LED to indicate the current beer temp
    //if (temp > tarTemp) {
    //    RGB.color(255, 0, 0);
    //} else {
    //    RGB.color(0, 0, 255);
    //}
    //double fracFromTarget = 255*(fabs(temp - tarTemp)/(tempTolerance/2));
    //RGB.brightness((int)fracFromTarget);
    
    //Only update everything once every five seconds
    delay(5000);
    
    sprintf(tempInfo,
            "{\"temp\":%0.1f,\"tempOut\":%0.1f,\"targetTemp\":%0.1f,\"relayOn\":%d,\"rampFrac\":%0.2f,\
            \"mode\":%d,\"rampStartTime\":%0.f,\"rampStartTemp\":%0.1f,\"rampEndTemp\":%0.1f,\
            \"rampDays\":%0.10f,\"tempMode\":\"%s\"}",
            temp,tempOut,tarTemp,relayOn,fracThroughRamp,
            modeSta,rampSta,rampStart,rampEnd,
            rampDays,tempMode.c_str());
}

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

//Mostly from adafruit's tutorial 
//  http://learn.adafruit.com/thermistor/using-a-thermistor
double getTempReading(int sensor_pin, double correction) {
  double readingTotal = 0;
  for (int i=0; i < numReadings; i++) {
    readingTotal += analogRead(sensor_pin);
  }
    
  double average = readingTotal/numReadings;
  
  average = 4095 / average - 1;
  average = SERIESRESISTOR / average;
  //return(average);
  
  double steinhart;
  steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
  steinhart = log(steinhart);                  // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart;                 // Invert
  steinhart -= 273.15;                         // convert to C
  steinhart = steinhart * 1.8 + 32;            //convert to F

  //Round the resulting temp to one decimal place
  steinhart *= 10;
  steinhart = round(steinhart);
  steinhart /= 10;
  return steinhart - correction;
}

//Constant Mode Controls
int setConstMode(String args) {
    modeSta = 1;
    controlOn = 1;
    
    tarTemp = atof(args.c_str());
    return 1;
}

//Ramp mode controls
int setRampMode(String args) {
    //Expected parameters in CSV format
    // 1. Ramp Start Temp
    // 2. Ramp End Temp
    // 3. Ramp Time (days)
    
    char copyStr[64];
    args.toCharArray(copyStr,64);
    char *p = strtok(copyStr, ",");
    
    controlOn = 1;
    
    rampStart = atof(p);
    p = strtok(NULL,",");
    rampEnd = atof(p);
    p = strtok(NULL,",");
    rampDays = atof(p);

    modeSta = 2;
    controlOn = 1;
    rampSta = millis();
    
    return 1;
}

//Turn off control
int turnOff(String args) {
    controlOn = 0;
    return 1;
}
